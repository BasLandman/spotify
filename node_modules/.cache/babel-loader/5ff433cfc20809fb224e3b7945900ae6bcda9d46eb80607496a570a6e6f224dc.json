{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Namespace = void 0;\nvar RandomGenerator_1 = require(\"../utils/RandomGenerator\");\nvar TypeGuardError_1 = require(\"../TypeGuardError\");\nvar _any_1 = require(\"./$any\");\nvar _every_1 = require(\"./$every\");\nvar _guard_1 = require(\"./$guard\");\nvar _is_between_1 = require(\"./$is_between\");\nvar _is_email_1 = require(\"./$is_email\");\nvar _is_ipv4_1 = require(\"./$is_ipv4\");\nvar _is_ipv6_1 = require(\"./$is_ipv6\");\nvar _is_url_1 = require(\"./$is_url\");\nvar _is_uuid_1 = require(\"./$is_uuid\");\nvar _join_1 = require(\"./$join\");\nvar _number_1 = require(\"./$number\");\nvar _report_1 = require(\"./$report\");\nvar _rest_1 = require(\"./$rest\");\nvar _string_1 = require(\"./$string\");\nvar _tail_1 = require(\"./$tail\");\nvar Namespace;\n(function (Namespace) {\n  Namespace.is = function () {\n    return {\n      is_uuid: _is_uuid_1.$is_uuid,\n      is_email: _is_email_1.$is_email,\n      is_url: _is_url_1.$is_url,\n      is_ipv4: _is_ipv4_1.$is_ipv4,\n      is_ipv6: _is_ipv6_1.$is_ipv6,\n      is_between: _is_between_1.$is_between\n    };\n  };\n  Namespace.assert = function (method) {\n    return __assign(__assign({}, Namespace.is()), {\n      join: _join_1.$join,\n      every: _every_1.$every,\n      guard: (0, _guard_1.$guard)(\"typia.\".concat(method)),\n      predicate: function (matched, exceptionable, closure) {\n        if (matched === false && exceptionable === true) throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, closure()), {\n          method: \"typia.\".concat(method)\n        }));\n        return matched;\n      }\n    });\n  };\n  Namespace.validate = function () {\n    return __assign(__assign({}, Namespace.is()), {\n      join: _join_1.$join,\n      report: _report_1.$report,\n      predicate: function (res) {\n        return function (matched, exceptionable, closure) {\n          if (matched === false && exceptionable === true) (function () {\n            res.success && (res.success = false);\n            var errorList = res.errors;\n            var error = closure();\n            if (errorList.length) {\n              var last = errorList[errorList.length - 1].path;\n              if (last.length >= error.path.length && last.substring(0, error.path.length) === error.path) return;\n            }\n            errorList.push(error);\n            return;\n          })();\n          return matched;\n        };\n      }\n    });\n  };\n  Namespace.stringify = function (method) {\n    return __assign(__assign({}, Namespace.is()), {\n      number: _number_1.$number,\n      string: _string_1.$string,\n      tail: _tail_1.$tail,\n      rest: _rest_1.$rest,\n      throws: $throws(method)\n    });\n  };\n  Namespace.clone = function (method) {\n    return __assign(__assign({}, Namespace.is()), {\n      throws: $throws(method),\n      any: _any_1.$any\n    });\n  };\n  Namespace.prune = function (method) {\n    return __assign(__assign({}, Namespace.is()), {\n      throws: $throws(method)\n    });\n  };\n  Namespace.random = function () {\n    return {\n      generator: RandomGenerator_1.RandomGenerator,\n      pick: RandomGenerator_1.RandomGenerator.pick\n    };\n  };\n  var $throws = function (method) {\n    return function (props) {\n      throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), {\n        method: \"typia.\".concat(method)\n      }));\n    };\n  };\n})(Namespace = exports.Namespace || (exports.Namespace = {}));","map":{"version":3,"names":["RandomGenerator_1","require","TypeGuardError_1","_any_1","_every_1","_guard_1","_is_between_1","_is_email_1","_is_ipv4_1","_is_ipv6_1","_is_url_1","_is_uuid_1","_join_1","_number_1","_report_1","_rest_1","_string_1","_tail_1","Namespace","is","is_uuid","$is_uuid","is_email","$is_email","is_url","$is_url","is_ipv4","$is_ipv4","is_ipv6","$is_ipv6","is_between","$is_between","assert","method","__assign","join","$join","every","$every","guard","$guard","concat","predicate","matched","exceptionable","closure","TypeGuardError","validate","report","$report","res","success","errorList","errors","error","length","last","path","substring","push","stringify","number","$number","string","$string","tail","$tail","rest","$rest","throws","$throws","clone","any","$any","prune","random","generator","RandomGenerator","pick","props","exports"],"sources":["C:\\Users\\aidan\\OneDrive\\Desktop\\spotify\\node_modules\\typia\\src\\functional\\Namespace.ts"],"sourcesContent":["import { RandomGenerator } from \"../utils/RandomGenerator\";\n\nimport { IValidation } from \"../IValidation\";\nimport { TypeGuardError } from \"../TypeGuardError\";\nimport { $any } from \"./$any\";\nimport { $every } from \"./$every\";\nimport { $guard } from \"./$guard\";\nimport { $is_between } from \"./$is_between\";\nimport { $is_email } from \"./$is_email\";\nimport { $is_ipv4 } from \"./$is_ipv4\";\nimport { $is_ipv6 } from \"./$is_ipv6\";\nimport { $is_url } from \"./$is_url\";\nimport { $is_uuid } from \"./$is_uuid\";\nimport { $join } from \"./$join\";\nimport { $number } from \"./$number\";\nimport { $report } from \"./$report\";\nimport { $rest } from \"./$rest\";\nimport { $string } from \"./$string\";\nimport { $tail } from \"./$tail\";\n\n/**\n * @internal\n */\nexport namespace Namespace {\n    export const is = () => ({\n        is_uuid: $is_uuid,\n        is_email: $is_email,\n        is_url: $is_url,\n        is_ipv4: $is_ipv4,\n        is_ipv6: $is_ipv6,\n        is_between: $is_between,\n    });\n\n    export const assert = (method: string) => ({\n        ...is(),\n        join: $join,\n        every: $every,\n        guard: $guard(`typia.${method}`),\n        predicate: (\n            matched: boolean,\n            exceptionable: boolean,\n            closure: () => Omit<TypeGuardError.IProps, \"method\">,\n        ): boolean => {\n            if (matched === false && exceptionable === true)\n                throw new TypeGuardError({\n                    ...closure(),\n                    method: `typia.${method}`,\n                });\n            return matched;\n        },\n    });\n\n    export const validate = () => ({\n        ...is(),\n        join: $join,\n        report: $report,\n        predicate:\n            (res: IValidation) =>\n            (\n                matched: boolean,\n                exceptionable: boolean,\n                closure: () => IValidation.IError,\n            ) => {\n                // CHECK FAILURE\n                if (matched === false && exceptionable === true)\n                    (() => {\n                        res.success &&= false;\n                        const errorList = (res as IValidation.IFailure).errors;\n\n                        // TRACE ERROR\n                        const error = closure();\n                        if (errorList.length) {\n                            const last = errorList[errorList.length - 1]!.path;\n                            if (\n                                last.length >= error.path.length &&\n                                last.substring(0, error.path.length) ===\n                                    error.path\n                            )\n                                return;\n                        }\n                        errorList.push(error);\n                        return;\n                    })();\n                return matched;\n            },\n    });\n\n    export const stringify = (method: string) => ({\n        ...is(),\n        number: $number,\n        string: $string,\n        tail: $tail,\n        rest: $rest,\n        throws: $throws(method),\n    });\n\n    export const clone = (method: string) => ({\n        ...is(),\n        throws: $throws(method),\n        any: $any,\n    });\n\n    export const prune = (method: string) => ({\n        ...is(),\n        throws: $throws(method),\n    });\n\n    export const random = () => ({\n        generator: RandomGenerator,\n        pick: RandomGenerator.pick,\n    });\n\n    const $throws =\n        (method: string) =>\n        (props: Pick<TypeGuardError.IProps, \"expected\" | \"value\">) => {\n            throw new TypeGuardError({\n                ...props,\n                method: `typia.${method}`,\n            });\n        };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}